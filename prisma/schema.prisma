datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(USER)
  accounts      Account[]
  profile       Profile?
  blogs         Blog[]
  likedBlogs    UsersOnBlogs[]
  comments      Comment[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  gender      Gender?
  websiteUrl  String?
  githubUrl   String?
  linkedinUrl String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum Gender {
  male
  female
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  blogs Blog[]

  @@map("categories")
}

model Blog {
  id           String         @id @default(cuid())
  userId       String
  categoryName String
  title        String
  description  String?
  imageUrl     String?
  content      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Category     Category       @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  likes        UsersOnBlogs[]
  comments     Comment[]

  @@map("blogs")
}

model UsersOnBlogs {
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  blog    Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
  likedAt DateTime @default(now())

  @@id([userId, blogId])
}

model Comment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId     String
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  commentId  String?  @unique
  replyOn    Comment? @relation("CommentReply", fields: [commentId], references: [id], onDelete: Cascade)
  respondent Comment? @relation("CommentReply")
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("comments")
}
